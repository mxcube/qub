import os
import sipconfig
import Qwt5

QT3=True
if QT3:
    import pyqtconfig
else:
    import PyQt4.pyqtconfig as pyqtconfig

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "qwttools.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()

# Get the extra SIP flags needed by the imported qt module.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
if QT3:
    qt_sip_flags = config.pyqt_qt_sip_flags
else:
    qt_sip_flags = config.pyqt_sip_flags

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
cmd = " ".join([config.sip_bin,"-g", "-e","-c", '.', "-b", build_file, "-I", config.pyqt_sip_dir,'-t','Qwt_5_1_0', qt_sip_flags,"qwttools.sip"])
print cmd
os.system(cmd)
#little HACK for adding source
bfile = file(build_file)
whole_line = ''
for line in bfile :
    if 'sources' in line :
        begin,end = line.split('=')
        line = '%s = qwttools_scale.cpp %s' % (begin,end)
    whole_line += line
bfile.close()
bfile = file(build_file,'w')
bfile.write(whole_line)
bfile.close()

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

installs.append(["qwttools.sip", os.path.join(config.default_sip_dir, "qwttools")])

installs.append(["qwttoolsconfig.py", config.default_mod_dir])

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = pyqtconfig.QtModuleMakefile(
    configuration=config,
    build_file=build_file,
    installs=installs
  )
makefile.CXXFLAGS.append('-I/segfs/bliss/depot/pythonbliss/builddir/suse82/PyQt4/PyQwt-5.0.0/qwt-5.0/src')
# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
# None (for me)
#os.system('ar rcs libQwt.a %s' % os.path.join(os.path.dirname(Qwt5.__file__),'Qwt.so'))
makefile.LFLAGS.append('-L.')
makefile.extra_libs.append('Qwt')
# Generate the Makefile itself.
makefile.generate()

# Now we create the configuration module.  This is done by merging a Python
# dictionary (whose values are normally determined dynamically) with a
# (static) template.
content = {
    # Publish where the SIP specifications for this module will be
    # installed.
    "qwttools_sip_dir":    config.default_sip_dir,

    # Publish the set of SIP flags needed by this module.  As these are the
    # same flags needed by the qt module we could leave it out, but this
    # allows us to change the flags at a later date without breaking
    # scripts that import the configuration module.
    "qwttools_sip_flags":  qt_sip_flags
}

# This creates the qwttoolsconfig.py module from the qwttoolsconfig.py.in
# template and the dictionary.
sipconfig.create_config_module("qwttoolsconfig.py", "qwttoolsconfig.py.in", content)
